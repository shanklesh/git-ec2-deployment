# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]

  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - run: npm ci

      - name: Run test
        run: npm test

      - name: Check PR status
        run: |
          echo "${{github.event.pull_request.merged}}"

  deploy:
    needs: build
    if: ${{github.event.pull_request.merged}}
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - uses: actions/checkout@v3
      - name: Say Hello world
        env:
          PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}

        run: echo Hello

      - name: multiline step
        run: |
          pwd
          ls
          echo "${{secrets.SSH_PRIVATE_KEY}}" > key.pem
          echo Give 600 permissions to key.pem file
          chmod 600 key.pem
          echo ===========Deployment to aws ec2 starts here======================
          echo copy project folder to aws ec2
          tar cvzf server.tar.gz src *.txt LICENSE *.md *.json *.pem
          scp -o StrictHostKeyChecking=no -i ./key.pem ./server.tar.gz  ubuntu@ec2-18-181-220-174.ap-northeast-1.compute.amazonaws.com:~/
          echo ssh into aws console
          ssh -o StrictHostKeyChecking=no -i ./key.pem ubuntu@ec2-18-181-220-174.ap-northeast-1.compute.amazonaws.com <<"ENDSSH"
          tar xvzf server.tar.gz -C ./server
          cd server         
          export NVM_DIR=~/.nvm
          source ~/.nvm/nvm.sh
          echo node version
          node --version
          echo npm version
          npm -v
          npm install
          ENDSSH
          echo ==============Server deployed successfully=========================
